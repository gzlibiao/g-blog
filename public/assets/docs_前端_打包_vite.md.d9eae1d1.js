import{_ as a,o as s,c as n,a as i}from"./app.d0abd10b.js";const m=JSON.parse('{"title":"vite","description":"","frontmatter":{},"headers":[{"level":2,"title":"vite 原理","slug":"vite-原理","link":"#vite-原理","children":[{"level":3,"title":"识别 script type=module","slug":"识别-script-type-module","link":"#识别-script-type-module","children":[]},{"level":3,"title":"vite 底层","slug":"vite-底层","link":"#vite-底层","children":[]},{"level":3,"title":"vite 热更新改进","slug":"vite-热更新改进","link":"#vite-热更新改进","children":[]}]},{"level":2,"title":"环境变量","slug":"环境变量","link":"#环境变量","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[{"level":3,"title":"vite 缺点","slug":"vite-缺点","link":"#vite-缺点","children":[]}]}],"relativePath":"docs/前端/打包/vite.md"}'),t={name:"docs/前端/打包/vite.md"};function l(p,e,r,o,c,d){return s(),n("div",null,e[0]||(e[0]=[i(`<h1 id="vite" tabindex="-1">vite <a class="header-anchor" href="#vite" aria-hidden="true">#</a></h1><h2 id="vite-原理" tabindex="-1">vite 原理 <a class="header-anchor" href="#vite-原理" aria-hidden="true">#</a></h2><h3 id="识别-script-type-module" tabindex="-1">识别 script type=module <a class="header-anchor" href="#识别-script-type-module" aria-hidden="true">#</a></h3><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">浏览器就会像服务器发起一个 GEThttp://localhost:3000/src/main.js 请求 main.js 文件：</span></span>
<span class="line"><span style="color:#A6ACCD;">// /src/main.js:</span></span>
<span class="line"><span style="color:#A6ACCD;">import { createApp } from &#39;vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">import App from &#39;./App.vue&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">createApp(App).mount(&#39;#app&#39;)</span></span>
<span class="line"><span style="color:#A6ACCD;">浏览器请求到了 main.js 文件，检测到内部含有 import 引入的包，又会对其内部的 import 引用发起 HTTP 请求获取模块的内容文件如：</span></span>
<span class="line"><span style="color:#A6ACCD;">GET http://localhost:3000/@modules/vue.js</span></span>
<span class="line"><span style="color:#A6ACCD;">如：GET http://localhost:3000/src/App.vue</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>Vite 的主要功能就是通过劫持浏览器的这些请求，并在后端进行相应的处理将项目中使用的文件通过简单的分解与整合，然后再返回给浏览器,Vite 整个过程中没有对文件进行打包编译，所以其运行速度比原始的 webpack 开发编译速度快出许多！</p><h3 id="vite-底层" tabindex="-1">vite 底层 <a class="header-anchor" href="#vite-底层" aria-hidden="true">#</a></h3><p>Vite 将会使用 esbuild 预构建依赖。Esbuild 使用 Go 编写，并且比以 Node.js 编写的打包器预构建依赖快 10-100 倍。</p><h3 id="vite-热更新改进" tabindex="-1">vite 热更新改进 <a class="header-anchor" href="#vite-热更新改进" aria-hidden="true">#</a></h3><p>在 Vite 中，HMR 是在原生 ESM 上执行的。当编辑一个文件时，Vite 只需要精确地使已编辑的模块与其最近的 HMR 边界之间的链失效（大多数时候只需要模块本身），使 HMR 更新始终快速，无论应用的大小。Vite 同时利用 HTTP 头来加速整个页面的重新加载（再次让浏览器为我们做更多事情）：源码模块的请求会根据 304 Not Modified 进行协商缓存，而依赖模块请求则会通过 Cache-Control: max-age=31536000,immutable 进行强缓存，因此一旦被缓存它们将不需要再次请求。</p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-hidden="true">#</a></h2><p>1.Vite 在一个特殊的 i<wbr>mport.meta.env 对象上暴露环境变量。这里有一些在所有情况下都可以使用的内建变量：</p><p>2.i<wbr>mport.meta.env.MODE: {string} 应用运行的模式。</p><p>3.i<wbr>mport.meta.env.BASE_URL: {string} 部署应用时的基本 URL。他由 base 配置项决定。</p><p>4.i<wbr>mport.meta.env.PROD: {boolean} 应用是否运行在生产环境。</p><p>5.i<wbr>mport.meta.env.DEV: {boolean} 应用是否运行在开发环境 (永远与 i<wbr>mport.meta.env.PROD 相反)。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-hidden="true">#</a></h2><h3 id="vite-缺点" tabindex="-1">vite 缺点 <a class="header-anchor" href="#vite-缺点" aria-hidden="true">#</a></h3><ol><li>生态不如 webpack (时间问题)</li><li>生成环境构建用的 rollup 对于 css 代码分割不友好</li></ol>`,18)]))}const v=a(t,[["render",l]]);export{m as __pageData,v as default};
