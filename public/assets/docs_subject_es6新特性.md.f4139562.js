import{_ as s,c as n,o as a,a as l}from"./app.116e60de.js";const F=JSON.parse('{"title":"es6新特性","description":"","frontmatter":{},"headers":[{"level":2,"title":"let 和 const","slug":"let-和-const","link":"#let-和-const","children":[]},{"level":2,"title":"Symbol","slug":"symbol","link":"#symbol","children":[]},{"level":2,"title":"模板字符串","slug":"模板字符串","link":"#模板字符串","children":[]},{"level":2,"title":"解构表达式","slug":"解构表达式","link":"#解构表达式","children":[]},{"level":2,"title":"Set()、map()数据结构 weakMap/weakSet/weakRef","slug":"set-、map-数据结构-weakmap-weakset-weakref","link":"#set-、map-数据结构-weakmap-weakset-weakref","children":[{"level":3,"title":"弱引用对象的一大用处，就是作为缓存，未被清除时可以从缓存取值，一旦清除缓存就自动失效","slug":"弱引用对象的一大用处-就是作为缓存-未被清除时可以从缓存取值-一旦清除缓存就自动失效","link":"#弱引用对象的一大用处-就是作为缓存-未被清除时可以从缓存取值-一旦清除缓存就自动失效","children":[]}]},{"level":2,"title":"bigint","slug":"bigint","link":"#bigint","children":[{"level":3,"title":"BigInt 是一种新的数据类型，用于当整数值大于 Number 数据类型支持的范围时( number只能存 2^53 -1 )。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数 ID 等等，而不需要使用库。","slug":"bigint-是一种新的数据类型-用于当整数值大于-number-数据类型支持的范围时-number只能存-2-53-1-。这种数据类型允许我们安全地对大整数执行算术操作-表示高分辨率的时间戳-使用大整数-id-等等-而不需要使用库。","link":"#bigint-是一种新的数据类型-用于当整数值大于-number-数据类型支持的范围时-number只能存-2-53-1-。这种数据类型允许我们安全地对大整数执行算术操作-表示高分辨率的时间戳-使用大整数-id-等等-而不需要使用库。","children":[]}]},{"level":2,"title":"ES6 新加的数组方法及使用（Array）","slug":"es6-新加的数组方法及使用-array","link":"#es6-新加的数组方法及使用-array","children":[]},{"level":2,"title":"ES6 新加的对象方法及使用（Object）","slug":"es6-新加的对象方法及使用-object","link":"#es6-新加的对象方法及使用-object","children":[]},{"level":2,"title":"箭头函数","slug":"箭头函数","link":"#箭头函数","children":[]},{"level":2,"title":"proxy | reflect","slug":"proxy-reflect","link":"#proxy-reflect","children":[]},{"level":2,"title":"Promise","slug":"promise","link":"#promise","children":[]},{"level":2,"title":"class(面向对象编程)","slug":"class-面向对象编程","link":"#class-面向对象编程","children":[]},{"level":2,"title":"模块化开发","slug":"模块化开发","link":"#模块化开发","children":[]}],"relativePath":"docs/subject/es6新特性.md"}'),p={name:"docs/subject/es6新特性.md"},e=l(`<h1 id="es6新特性" tabindex="-1">es6新特性 <a class="header-anchor" href="#es6新特性" aria-hidden="true">#</a></h1><h2 id="let-和-const" tabindex="-1">let 和 const <a class="header-anchor" href="#let-和-const" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;">：定义变量，只能在块作用域里访问，不能声明同名变量。不存在变量提升的问题</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;">：定义常量，不能声明同名变量，只能在块作用域里访问，而且不能修改，但是在定义的对象时对象属性值可以改变，不存在变量提升的问题</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//这样创建一个 Symbol 值</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//或者使用 let 创建</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newValue )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//Symbol()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//因为 Symbol 是基本数据类型，而不是对象所以不能用 new 创建，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//会出现 Symbol is not a constructor 的报错</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> newValue </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Symbol</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">1</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">includes</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">apple,orange,banana</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">2</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">startsWith</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">endsWith</span></span>
<span class="line"><span style="color:#82AAFF;">startsWith</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">endsWith</span><span style="color:#A6ACCD;">()：判断字符串是否以参数字符串开头或结尾。返回 boolean 值。这两个方法可以有第二个参数，一个数字，表示开始查找的位置。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple,orange,banana</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">startsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">apple</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//true</span></span>
<span class="line"><span style="color:#A6ACCD;">str</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">endsWith</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">peach</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">3</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">repeat</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> a</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hi</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">repeat</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">))</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//&#39;hihi&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">4</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">padStart</span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">padENd</span></span>
<span class="line"><span style="color:#82AAFF;">padStart</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">/</span><span style="color:#82AAFF;">padEnd</span><span style="color:#A6ACCD;">()：用参数字符串按给定长度从前面或后面补全字符串，返回新字符串</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="解构表达式" tabindex="-1">解构表达式 <a class="header-anchor" href="#解构表达式" aria-hidden="true">#</a></h2><h5 id="数组解构" tabindex="-1">数组解构 <a class="header-anchor" href="#数组解构" aria-hidden="true">#</a></h5><h5 id="对象解构" tabindex="-1">对象解构 <a class="header-anchor" href="#对象解构" aria-hidden="true">#</a></h5><h2 id="set-、map-数据结构-weakmap-weakset-weakref" tabindex="-1">Set()、map()数据结构 weakMap/weakSet/weakRef <a class="header-anchor" href="#set-、map-数据结构-weakmap-weakset-weakref" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">()是什么及写法？</span></span>
<span class="line"><span style="color:#A6ACCD;">map 属于 es6 新增加的数据结构</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;">map</span><span style="color:#A6ACCD;">()是键值对，里面的键和值可以任意，Map 对象有一个 size 属性，存储了键值对的个数，而 object 对象没有类似属性。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">zhangsan</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">]])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newMap )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//{&#39;name&#39;=&gt;&#39;zhangsan&#39;,&#39;age&#39;=&gt;10}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newMap </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Map</span><span style="color:#A6ACCD;">([</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">zhangsan</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">age</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">newMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">man</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newMap)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//{&#39;name&#39; =&gt; &#39;zhangsan&#39;, &#39;age&#39; =&gt; 10, &#39;sex&#39; =&gt; &#39;man&#39;}</span></span>
<span class="line"><span style="color:#A6ACCD;">newMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lisi</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newMap)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {&#39;name&#39; =&gt; &#39;lisi&#39;, &#39;age&#39; =&gt; 10, &#39;sex&#39; =&gt; &#39;man&#39;}</span></span>
<span class="line"><span style="color:#A6ACCD;">newMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">sex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">man</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">aaa</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hahah</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newMap)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// {&#39;name&#39; =&gt; &#39;lisi&#39;, &#39;age&#39; =&gt; 10, &#39;sex&#39; =&gt; &#39;man&#39;, &#39;aaa&#39; =&gt; &#39;hahah&#39;}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">map函数 </span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">entries</span><span style="color:#A6ACCD;">()：返回键值对的遍历器</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()：清除所有数据，没有返回值</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#A6ACCD;">(value)：判断该值是否存在返回boolean</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(value)：get 方法读取 key 对应的键值，如果找不到就返回 underfined</span></span>
<span class="line"><span style="color:#A6ACCD;">map</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(key，value)：设置键名 key 对应的键值 value，返回整个 map 解构，如果 key 已经有值，则进行覆盖，可以链式操作</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">()是值的集合，是类数组，里面的值的唯一的，可以实现数组去重</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//注意：必须传数组进去，否则会报错</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> newSet </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Set</span><span style="color:#A6ACCD;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(newSet )</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">//{1,2,3}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">set函数</span></span>
<span class="line"><span style="color:#A6ACCD;">Set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#A6ACCD;">(value)：添加一个数据，返回 Set 解构本身，可以进行链式操作</span></span>
<span class="line"><span style="color:#A6ACCD;">Set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">delete</span><span style="color:#A6ACCD;">(value)：删除指定数据，返回一个布尔值，表示是否删除成功</span></span>
<span class="line"><span style="color:#A6ACCD;">Set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#A6ACCD;">(value)：判断该值是否为 Set 成员，返回一个布尔值</span></span>
<span class="line"><span style="color:#A6ACCD;">Set</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#A6ACCD;">()：清除所有数据，没有返回值</span></span>
<span class="line"><span style="color:#A6ACCD;">size：表示 Set 解构的长度</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h3 id="弱引用对象的一大用处-就是作为缓存-未被清除时可以从缓存取值-一旦清除缓存就自动失效" tabindex="-1">弱引用对象的一大用处，就是作为缓存，未被清除时可以从缓存取值，一旦清除缓存就自动失效 <a class="header-anchor" href="#弱引用对象的一大用处-就是作为缓存-未被清除时可以从缓存取值-一旦清除缓存就自动失效" aria-hidden="true">#</a></h3><h2 id="bigint" tabindex="-1">bigint <a class="header-anchor" href="#bigint" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">new BigInt() // TypeError</span></span>
<span class="line"><span style="color:#A6ACCD;">BigInt(undefined) //TypeError</span></span>
<span class="line"><span style="color:#A6ACCD;">BigInt(null) // TypeError</span></span>
<span class="line"><span style="color:#A6ACCD;">BigInt(&#39;123n&#39;) // SyntaxError</span></span>
<span class="line"><span style="color:#A6ACCD;">BigInt(&#39;abc&#39;) // SyntaxError</span></span>
<span class="line"><span style="color:#A6ACCD;">1n + 1.3 // 报错</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="bigint-是一种新的数据类型-用于当整数值大于-number-数据类型支持的范围时-number只能存-2-53-1-。这种数据类型允许我们安全地对大整数执行算术操作-表示高分辨率的时间戳-使用大整数-id-等等-而不需要使用库。" tabindex="-1">BigInt 是一种新的数据类型，用于当整数值大于 Number 数据类型支持的范围时( number只能存 2^53 -1 )。这种数据类型允许我们安全地对大整数执行算术操作，表示高分辨率的时间戳，使用大整数 ID 等等，而不需要使用库。 <a class="header-anchor" href="#bigint-是一种新的数据类型-用于当整数值大于-number-数据类型支持的范围时-number只能存-2-53-1-。这种数据类型允许我们安全地对大整数执行算术操作-表示高分辨率的时间戳-使用大整数-id-等等-而不需要使用库。" aria-hidden="true">#</a></h3><p>9.1+0.2 =&gt; 0.30000000000000004 // 计算机对于浮点数无法精确表示二进制数</p><h2 id="es6-新加的数组方法及使用-array" tabindex="-1">ES6 新加的数组方法及使用（Array） <a class="header-anchor" href="#es6-新加的数组方法及使用-array" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">map</span></span>
<span class="line"><span style="color:#A6ACCD;">forEach</span></span>
<span class="line"><span style="color:#A6ACCD;">filter</span></span>
<span class="line"><span style="color:#A6ACCD;">some 或者 |</span></span>
<span class="line"><span style="color:#A6ACCD;">every 并且 &amp;</span></span>
<span class="line"><span style="color:#A6ACCD;">includes</span></span>
<span class="line"><span style="color:#A6ACCD;">find</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;">Array.from({1:&#39;a&#39;,2:&#39;b&#39;})：用于将对象转换为数组，类数组转数组</span></span>
<span class="line"><span style="color:#A6ACCD;">Array.of([1,2,3])</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="es6-新加的对象方法及使用-object" tabindex="-1">ES6 新加的对象方法及使用（Object） <a class="header-anchor" href="#es6-新加的对象方法及使用-object" aria-hidden="true">#</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Object.assign()：用于对象的合并，将原对象的所有可枚举属性，复制到目标对象</span></span>
<span class="line"><span style="color:#A6ACCD;">Object.keys</span></span>
<span class="line"><span style="color:#A6ACCD;">Object.values</span></span>
<span class="line"><span style="color:#A6ACCD;">Object.entries 返回二维数组</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、箭头函数有更简洁的写法，不用写 </span><span style="color:#C792EA;">function</span></span>
<span class="line"><span style="color:#A6ACCD;">2、</span><span style="color:#82AAFF;">箭头函数是匿名函数</span></span>
<span class="line"><span style="color:#A6ACCD;">3、</span><span style="color:#82AAFF;">箭头函数没有</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">prototype</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">属性</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">不可以把箭头函数当作构造函数</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">所以不能用</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">关键字调用箭头函数</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">否则抛出一个错误</span><span style="color:#A6ACCD;">、</span><span style="color:#82AAFF;">也没有</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">arguments</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">属性</span></span>
<span class="line"><span style="color:#A6ACCD;">4、</span><span style="color:#82AAFF;">箭头函数和普通函数最大的区别在于其内部</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">永远指向其父级的</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">this</span></span>
<span class="line"><span style="color:#A6ACCD;">5、</span><span style="color:#82AAFF;">箭头函数适用于无复杂逻辑</span><span style="color:#A6ACCD;">（</span><span style="color:#82AAFF;">回调函数</span><span style="color:#A6ACCD;">）</span><span style="color:#82AAFF;">的函数里面</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">例如可以用在</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">map</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">、</span><span style="color:#82AAFF;">reduce</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">、</span><span style="color:#82AAFF;">filter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">、</span><span style="color:#82AAFF;">forEach</span><span style="color:#89DDFF;">()</span><span style="color:#82AAFF;">的回调函数中</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">6、</span><span style="color:#82AAFF;">不要在最外层使用箭头函数</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">会指向</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">window</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">而且无法改变</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">最好在外层包裹一层普通函数</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">把</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">控制在可见范围内</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">特点</span></span>
<span class="line"><span style="color:#A6ACCD;">（1）</span><span style="color:#82AAFF;">箭头函数没有自己的</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">this</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">对象</span><span style="color:#A6ACCD;">（</span><span style="color:#82AAFF;">详见下文</span><span style="color:#A6ACCD;">）。</span></span>
<span class="line"><span style="color:#A6ACCD;">（2）</span><span style="color:#82AAFF;">不可以当作构造函数</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">也就是说</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">不可以对箭头函数使用</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">命令</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">否则会抛出一个错误</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">（3）</span><span style="color:#82AAFF;">不可以使用</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">arguments</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">对象</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">该对象在函数体内不存在</span><span style="color:#A6ACCD;">。</span><span style="color:#82AAFF;">如果要用</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">可以用</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">rest</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">参数代替</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"><span style="color:#A6ACCD;">（4）</span><span style="color:#82AAFF;">不可以使用</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">yield</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">命令</span><span style="color:#A6ACCD;">，</span><span style="color:#82AAFF;">因此箭头函数不能用作</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Generator</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">函数</span><span style="color:#A6ACCD;">。</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="proxy-reflect" tabindex="-1">proxy | reflect <a class="header-anchor" href="#proxy-reflect" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">Proxy 用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种“元编程”（meta programming），即对编程语言进行编程。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">Proxy 支持的拦截操作一览，一共 </span><span style="color:#F78C6C;">13</span><span style="color:#A6ACCD;"> 种。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> receiver)：拦截对象属性的读取，比如 proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo 和 proxy[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> receiver)：拦截对象属性的设置，比如 proxy</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> v 或 proxy[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">] </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> v，返回一个布尔值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">has</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey)：拦截 propKey </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> proxy 的操作，返回一个布尔值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">deleteProperty</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey)：拦截 </span><span style="color:#89DDFF;">delete</span><span style="color:#A6ACCD;"> proxy[propKey]的操作，返回一个布尔值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">ownKeys</span><span style="color:#A6ACCD;">(target)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyNames</span><span style="color:#A6ACCD;">(proxy)、Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertySymbols</span><span style="color:#A6ACCD;">(proxy)、Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">(proxy)、for</span><span style="color:#89DDFF;">...in</span><span style="color:#A6ACCD;"> 循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#A6ACCD;">()的返回结果仅包括目标对象自身的可遍历属性。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey)，返回属性的描述对象。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propDesc)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propKey</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propDesc）、Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperties</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> propDescs)，返回一个布尔值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">preventExtensions</span><span style="color:#A6ACCD;">(target)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">preventExtensions</span><span style="color:#A6ACCD;">(proxy)，返回一个布尔值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(target)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#A6ACCD;">(proxy)，返回一个对象。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">isExtensible</span><span style="color:#A6ACCD;">(target)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isExtensible</span><span style="color:#A6ACCD;">(proxy)，返回一个布尔值。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> proto)：拦截 Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#A6ACCD;">(proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args)：拦截 Proxy 实例作为函数调用的操作，比如 </span><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args)、proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#A6ACCD;">(object</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args)、proxy</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">construct</span><span style="color:#A6ACCD;">(target</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> args)：拦截 Proxy 实例作为构造函数调用的操作，比如 </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">proxy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args)。</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 的特点</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 有三种状态，分别是 </span><span style="color:#82AAFF;">peding</span><span style="color:#A6ACCD;">(进行中)、</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(成功)、</span><span style="color:#82AAFF;">rejected</span><span style="color:#A6ACCD;">(失败)，并且状态一旦设定就不会改变</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 是用于解决传统回调函数的回调地狱的问题</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、</span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 是函数做参数</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F78C6C;">9.3</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 下的方法</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、 </span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">()方法：接收 </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 中 </span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(成功)传进来的方法和参数，</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">()方法也返回一个 </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 对象，并且 </span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">()方法可以链式调用</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、 </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#A6ACCD;">()方法：接收 </span><span style="color:#FFCB6B;">Promise</span><span style="color:#A6ACCD;"> 中 </span><span style="color:#82AAFF;">rejected</span><span style="color:#A6ACCD;">(失败)传进来的方法和参数</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、 </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;">()方法：无论是成功状态还是失败状态，都执行 </span><span style="color:#89DDFF;font-style:italic;">finally</span><span style="color:#A6ACCD;">()中的方法</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="class-面向对象编程" tabindex="-1">class(面向对象编程) <a class="header-anchor" href="#class-面向对象编程" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//class 的固定写法</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Person</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">constyuctor</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">age</span><span style="color:#89DDFF;">){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">init</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">age</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="模块化开发" tabindex="-1">模块化开发 <a class="header-anchor" href="#模块化开发" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">导入 </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#A6ACCD;">import </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">模块名称</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">路径</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">；</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">路径</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">；</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">导出 </span><span style="color:#C792EA;">export</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#A6ACCD;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ren</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">age </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">age</span><span style="color:#89DDFF;">};</span><span style="color:#676E95;font-style:italic;">//变量需要用大括号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">模块化优点</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、灵活架构，焦点分离</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、方便模块间组合、分解</span></span>
<span class="line"><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;">、方便单个模块功能调试、升级</span></span>
<span class="line"><span style="color:#F78C6C;">4</span><span style="color:#A6ACCD;">、多人协作互不干扰</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">模块化缺点</span></span>
<span class="line"><span style="color:#A6ACCD;">性能损耗</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">、系统分层，调用链会很长</span></span>
<span class="line"><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">、模块间发送消息会很耗性能</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div>`,31),o=[e];function r(c,t,A,y,C,D){return a(),n("div",null,o)}const b=s(p,[["render",r]]);export{F as __pageData,b as default};
