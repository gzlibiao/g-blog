import{_ as n,o as a,c as p,a6 as e}from"./chunks/framework.DxlwMnnj.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/运维相关/nginx.md","filePath":"articles/运维相关/nginx.md"}'),l={name:"articles/运维相关/nginx.md"};function i(c,s,t,o,r,d){return a(),p("div",{"data-pagefind-body":!0},s[0]||(s[0]=[e(`<h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    停止</span></span>
<span class="line"><span>    nginx -s quit</span></span>
<span class="line"><span>    查看进程</span></span>
<span class="line"><span>    ps -ef|grep nginx</span></span>
<span class="line"><span>    终止进程</span></span>
<span class="line"><span>    kill -9 [进程命令]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    查看版本：nginx -v</span></span>
<span class="line"><span>    启动：nginx</span></span>
<span class="line"><span>    重启：nginx -s reload</span></span>
<span class="line"><span>    暂停：nginx -s stop</span></span></code></pre></div><h2 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>user nginx;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 工作进程=&gt;一般是 cpu 有几核就写几,可以最大限度的去发挥它的性能</span></span>
<span class="line"><span>worker_processes auto;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 错误日志路径</span></span>
<span class="line"><span>error_log /var/log/nginx/error.log;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 一般不动它,给守护进程用的</span></span>
<span class="line"><span>pid /run/nginx.pid;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span></span>
<span class="line"><span>include /usr/share/nginx/modules/*.conf;</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 并发连接数=&gt;最大并发数:一个工作进程下的最大连接;默认 1024 个</span></span>
<span class="line"><span>events {</span></span>
<span class="line"><span>    worker_connections 1024;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># http 配置</span></span>
<span class="line"><span>http {</span></span>
<span class="line"><span>    # 日志格式</span></span>
<span class="line"><span>    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span></span>
<span class="line"><span>                      &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span></span>
<span class="line"><span>                      &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    access_log  /var/log/nginx/access.log  main;</span></span>
<span class="line"><span>    # 是否允许上传文件</span></span>
<span class="line"><span>    sendfile            on;</span></span>
<span class="line"><span>    # 能不能推送</span></span>
<span class="line"><span>    tcp_nopush          on;</span></span>
<span class="line"><span>    # gzip 压缩</span></span>
<span class="line"><span>    gzip                on;</span></span>
<span class="line"><span>    tcp_nodelay         on;</span></span>
<span class="line"><span>    # 长连接多长时间没有通信自动断开</span></span>
<span class="line"><span>    keepalive_timeout   65;</span></span>
<span class="line"><span>    types_hash_max_size 2048;</span></span>
<span class="line"><span>    include             /etc/nginx/mime.types;</span></span>
<span class="line"><span>    # 默认的 http 头</span></span>
<span class="line"><span>    default_type        application/octet-stream;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # Load modular configuration files from the /etc/nginx/conf.d directory.</span></span>
<span class="line"><span>    # See http://nginx.org/en/docs/ngx_core_module.html#include</span></span>
<span class="line"><span>    # for more information.</span></span>
<span class="line"><span>    include /etc/nginx/conf.d/*.conf;</span></span>
<span class="line"><span>    # 定义反向代理服务器</span></span>
<span class="line"><span>    upstream web{</span></span>
<span class="line"><span>        server 127.0.0.1:8080;</span></span>
<span class="line"><span>        # 这里的 server 如果只写一个就是单纯的额外网发布,如果写 n 个就是负载均衡</span></span>
<span class="line"><span>        server 127.0.0.1:8888 weight=1; #添加权重</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # 一个 server 对应一个网站</span></span>
<span class="line"><span>    server {</span></span>
<span class="line"><span>        # 端口</span></span>
<span class="line"><span>        listen       80 default_server;</span></span>
<span class="line"><span>        listen       [::]:80 default_server;</span></span>
<span class="line"><span>        # server域名</span></span>
<span class="line"><span>        server_name  _;</span></span>
<span class="line"><span>        root         /usr/share/nginx/html;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # Load configuration files for the default server block.</span></span>
<span class="line"><span>        include /etc/nginx/default.d/*.conf;</span></span>
<span class="line"><span>        # 站点根目录</span></span>
<span class="line"><span>        location / {</span></span>
<span class="line"><span>            root    html;</span></span>
<span class="line"><span>            index   index.html  index.htm;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        # 反向代理</span></span>
<span class="line"><span>        location /xxx/ {</span></span>
<span class="line"><span>            # 过来的请求代理到哪里</span></span>
<span class="line"><span>            proxy_pass http://web; # 前面upstream定义的</span></span>
<span class="line"><span>            # 如果需要客户端 ip,这个开关可能会重写为反向代理的 ip</span></span>
<span class="line"><span>            proxy_redirect off;</span></span>
<span class="line"><span>            # nginx 可能会改写头,用原来的值再把它改回来</span></span>
<span class="line"><span>            proxy_set_header Hose $host;</span></span>
<span class="line"><span>            # 代理服务器转发请求的时候用的协议版本</span></span>
<span class="line"><span>            proxy_http_version 1.1;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            proxy_set_header Upgrade $http_upgrade;</span></span>
<span class="line"><span>            proxy_set_header Connection &#39;upgrade&#39;;</span></span>
<span class="line"><span>            proxy_cache_bypass $http_upgrade;</span></span>
<span class="line"><span>            # 取客户端真实 ip</span></span>
<span class="line"><span>            proxy_set_header X-Real-IP $remote_addr;</span></span>
<span class="line"><span>            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            # 超时</span></span>
<span class="line"><span>            proxy_connect_timeout 600;</span></span>
<span class="line"><span>            proxy_read_timeout 600;</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>        # 配置 https</span></span>
<span class="line"><span>        server {</span></span>
<span class="line"><span>            # 一定要带上 ssl 标记,默认 443 端口</span></span>
<span class="line"><span>            listen       443 ssl;</span></span>
<span class="line"><span>            server_name  work.com;</span></span>
<span class="line"><span>            ssl                  on;</span></span>
<span class="line"><span>            # 证书</span></span>
<span class="line"><span>            ssl_certificate      /etc/nginx/server.crt;</span></span>
<span class="line"><span>            # 密钥</span></span>
<span class="line"><span>            ssl_certificate_key  /etc/nginx/server.key;</span></span>
<span class="line"><span>            # 超时</span></span>
<span class="line"><span>            ssl_session_timeout  5m;</span></span>
<span class="line"><span>            location / {</span></span>
<span class="line"><span>                root   /usr/local/web/;</span></span>
<span class="line"><span>                add_header &#39;Cache-Control&#39; &#39;no-store&#39;;</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>            error_page 404 /404.html;</span></span>
<span class="line"><span>                location = /40x.html {</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>            error_page 500 502 503 504 /50x.html;</span></span>
<span class="line"><span>                location = /50x.html {</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        error_page 404 /404.html;</span></span>
<span class="line"><span>            location = /40x.html {</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        error_page 500 502 503 504 /50x.html;</span></span>
<span class="line"><span>            location = /50x.html {</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="正向代理和反向代理区别" tabindex="-1">正向代理和反向代理区别 <a class="header-anchor" href="#正向代理和反向代理区别" aria-label="Permalink to &quot;正向代理和反向代理区别&quot;">​</a></h3><p>正向代理：意思是一个位于客户端和原始服务器之间的服务器，为了从原始服务器获取内容，客户端向代理发送一个请求并指定目标，然后代理向原始服务器转交请求并将获取到的内容返回给客户端</p><p>反向代理：其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，再返回给客户端，此时反向代理服务器和目标服务器对外就是一个接口，暴露的是代理服务器的地址，隐藏了真实服务器 IP 地址</p><p>总结：正向代理客端端知道真实服务器和代理服务器地址，向代理服务器发生请求 代理服务器转发真实服务器 反向代理 客户端不知道真实服务器地址 请求发送到代理服务器 代理服务器去选择目标服务器</p><h2 id="开启-gzip-压缩" tabindex="-1">开启 gzip 压缩 <a class="header-anchor" href="#开启-gzip-压缩" aria-label="Permalink to &quot;开启 gzip 压缩&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gzip  on;</span></span>
<span class="line"><span>gzip_min_length  1k;</span></span>
<span class="line"><span>gzip_buffers     4 16k;</span></span>
<span class="line"><span>gzip_http_version 1.1;</span></span>
<span class="line"><span>gzip_comp_level 9;</span></span>
<span class="line"><span>gzip_types       text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php application/javascript application/json;</span></span>
<span class="line"><span>gzip_disable &quot;MSIE [1-6]\\.&quot;;</span></span>
<span class="line"><span>gzip_vary on;</span></span></code></pre></div><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>浏览器同源策略 同一协议，域名，端口的站点是同源，非同源的站点在数据返回会被浏览器拦截</p><p>解决方式：</p><ol><li><p>cors 跨站资源共享 服务器响应头 设置允许跨域的站点 在进行cors请求会判断是简单请求还是复杂请求 get post head text/plain 文件 application 简单请求：发起请求时会携带origin,服务器会进行源站点的对比，通过才行响应 复杂请求：会发起一个options预检请求, 服务端通过才会进行真正的请求</p></li><li><p>jsonp script标签不受同源策略限制 客户端直接用script 标签请求服务器资源并且告知服务器回调函数名称，服务器接收请求，返回一个执行函数 缺点：只能get请求,可能被xss,无法处理404,500</p></li><li><p>nginx</p></li></ol><p>CORS中Cookie相关问题 默认情况下在跨域请求，浏览器是不带 cookie 的。如果想要传递Cookie，就要满足以下三个条件：</p><p>在请求中设置 withCredentials （axios.defaults.withCredentials = true） Access-Control-Allow-Credentials ： true Access-Control-Allow-Origin 设置为非 *</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>location ^~ /prefix {</span></span>
<span class="line"><span>	add_header Access-Control-Allow-Origin *;</span></span>
<span class="line"><span>	add_header Access-Control-Allow-Methods &#39;GET, POST, OPTIONS&#39;;</span></span>
<span class="line"><span>	add_header Access-Control-Allow-Headers &#39;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&#39;;</span></span>
<span class="line"><span>	rewrite ^/prefix/(.*)$/$1 break;</span></span>
<span class="line"><span>	proxy_pass 服务地址;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,17)]))}const u=n(l,[["render",i]]);export{g as __pageData,u as default};
