import{_ as t,o as e,c as i,a6 as s}from"./chunks/framework.DxlwMnnj.js";const u=JSON.parse('{"title":"redux概述","description":"","frontmatter":{"tag":["react","前端"]},"headers":[],"relativePath":"articles/react/redux.md","filePath":"articles/react/redux.md"}'),r={name:"articles/react/redux.md"};function l(o,a,n,p,c,d){return e(),i("div",{"data-pagefind-body":!0},a[0]||(a[0]=[s(`<h1 id="redux概述" tabindex="-1">redux概述 <a class="header-anchor" href="#redux概述" aria-label="Permalink to &quot;redux概述&quot;">​</a></h1><p>是一个js容器，用于全局状态管理</p><h3 id="三个核心" tabindex="-1">三个核心 <a class="header-anchor" href="#三个核心" aria-label="Permalink to &quot;三个核心&quot;">​</a></h3><ul><li>1 单一数据源 整个应用的state被存储在一颗objectTree中，并且这个object tree只存在于唯一一个store中</li><li>2 state只读的 唯一改变state的方法是触发action</li><li>3 使用纯函数来执行修改 为了描述action如何改变state tree 需要编写reducers</li></ul><h3 id="state-状态" tabindex="-1">state 状态 <a class="header-anchor" href="#state-状态" aria-label="Permalink to &quot;state 状态&quot;">​</a></h3><p>DomianData : 理解为服务端的数据，比如获取用户的信息，商品的列表 UiState : 决定当前ui显示的状态 AppState : App级别的状态，比如：当前是否请求loading,当前路由信息等可能被多个和组件去使用到的状态</p><h3 id="action" tabindex="-1">action <a class="header-anchor" href="#action" aria-label="Permalink to &quot;action&quot;">​</a></h3><p>action 是把数据从应用传递到store的载体，他是store数据的唯一来源，我们可以通过store.dispatch将action传递给store</p><ul><li>本质就是一个js对象</li><li>action 对象内部必须要有一个type数据表示要执行的操作</li><li>多数情况下，这个type 会被定义为字符串常量</li><li>除了type字段外，action 的结果随意进行定义</li><li>而我们在项目中，更多喜欢用action 创建函数</li><li>只是描述了有事情要发生，比没有描述如何更新state</li></ul><h3 id="reducer" tabindex="-1">reducer <a class="header-anchor" href="#reducer" aria-label="Permalink to &quot;reducer&quot;">​</a></h3><p>是一个函数，用来响应发送过来的actions, 然后经过处理，把state发送给store 在reducer函数中，需要return 返回值，这样store才能接收到数据 函数会接收两个参数，第一个参数是初始化state,第二个参数是action</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span></code></pre></div><h3 id="store" tabindex="-1">store <a class="header-anchor" href="#store" aria-label="Permalink to &quot;store&quot;">​</a></h3><p>store就是把action 与reducer联系到一起的对象 主要职责:</p><ul><li>维持应用的state</li><li>提供getState()方法获取state</li><li>提供dispatch() 方法发送action</li><li>通过subscribe() 注册监听</li><li>通过subscribe() 返回值注销监听</li></ul><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {createStore} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;redux&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> store</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;传递reducer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol><li><p>构建 action,创建函数返回一个带有type属性的变量</p></li><li><p>构建reducer,用来响应action,通过return 把数据给store</p></li><li><p>利用createStore创建store,构建时传递给我们写好的reducer</p></li><li><p>利用 store.subscribe注册监听</p></li><li><p>当我们利用 store.dispatch()发送一个action 就能触发监听，store.getState() 取值</p></li></ol>`,17)]))}const k=t(r,[["render",l]]);export{u as __pageData,k as default};
