import{_ as s,o as a,c as l,a6 as h}from"./chunks/framework.DxlwMnnj.js";const o=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"articles/面试/题目.md","filePath":"articles/面试/题目.md"}'),t={name:"articles/面试/题目.md"};function n(e,i,p,k,r,E){return a(),l("div",{"data-pagefind-body":!0},i[0]||(i[0]=[h(`<h3 id="http1-0-和-http2-0-https-对比" tabindex="-1">http1.0 和 http2.0 https 对比 <a class="header-anchor" href="#http1-0-和-http2-0-https-对比" aria-label="Permalink to &quot;http1.0 和 http2.0  https 对比&quot;">​</a></h3><ol><li>http1 文本形式传输 http2 二进制传输数据</li><li>连接复用：HTTP/1.0 采用“短连接”，请求和响应都需要单独建立和关闭一条 TCP 连接。而 HTTP/2.0 支持“长连接”，即可复用同一条 TCP 连接发送多个请求和响应。</li><li>多路复用：HTTP/1.0 每次只能发送一个请求，请求的顺序与响应的顺序相同。而 HTTP/2.0 支持多路复用，即可以同时发送多个请求，在服务端响应时按照请求的优先级和顺序依次返回。</li><li>请求头压缩：HTTP/1.0 的请求头信息没有压缩，可能会导致一些额外的网络开销。而 HTTP/2.0 使用了 HPACK 算法对请求头进行压缩，减少了网络传输的数据量。</li><li>服务器推送：HTTP/2.0 支持服务器推送，即在客户端请求的同时，服务端可以主动将一些与请求相关的资源推送到客户端缓存中，加速页面加载速度。而 HTTP/1.0 并不支持服务器推送。</li><li>HTTPS：HTTPS 是在 HTTP 协议基础上加入了安全层的协议，通过使用 SSL/TLS 加密通信内容，确保数据的安全性和完整性。HTTPS 使用了公钥加密和对称密钥加密等多种技术，使得数据在传输过程中不容易被窃听或篡改。使用 HTTPS 可以保护用户的隐私信息，防止恶意攻击和数据泄露。</li></ol><h3 id="设计过复杂的功能点" tabindex="-1">设计过复杂的功能点 <a class="header-anchor" href="#设计过复杂的功能点" aria-label="Permalink to &quot;设计过复杂的功能点&quot;">​</a></h3><h3 id="你觉得你同时懂前后端有什么用" tabindex="-1">你觉得你同时懂前后端有什么用？ <a class="header-anchor" href="#你觉得你同时懂前后端有什么用" aria-label="Permalink to &quot;你觉得你同时懂前后端有什么用？&quot;">​</a></h3><ol><li>需求评审阶段可以提前发现问题，避免后续一系列问题</li><li>开发阶段中更好的定位问题</li></ol><h3 id="pinia-和-vuex区别" tabindex="-1">pinia 和 vuex区别 <a class="header-anchor" href="#pinia-和-vuex区别" aria-label="Permalink to &quot;pinia 和 vuex区别&quot;">​</a></h3><ol><li>pinia更友好支持compositionApi</li><li>Vuex使用全局单例模式，即在整个应用程序中只有一个Store实例，所有组件共享这个实例。而Pinia则为每个组件实例创建一个自己的Store实例</li><li>vuex 修改状态我们会调mutations或actions中的函数 Pinia中我们只会调store实例 的属性或方法修改数据</li></ol><h3 id="实现两个大数相加" tabindex="-1">实现两个大数相加 <a class="header-anchor" href="#实现两个大数相加" aria-label="Permalink to &quot;实现两个大数相加&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;9007199254740991&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1234567899999999999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">实现代码如下:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //取两个数字的最大长度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //用0去补齐长度</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxLength , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;0009007199254740991&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxLength , </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;1234567899999999999&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   //定义加法过程中需要用到的变量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//&quot;进位&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">maxLength</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a[i]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b[i]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">floor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h3><p>前端配置 代理服务器 后端响应 请求头 cors nginx配置 反向代理</p><h3 id="cors请求预检" tabindex="-1">cors请求预检 <a class="header-anchor" href="#cors请求预检" aria-label="Permalink to &quot;cors请求预检&quot;">​</a></h3><h3 id="前端微应用是一种将前端应用拆分成独立的小型应用-每个应用都可以独立部署、运行和维护的架构模式。以下是前端微应用的优缺点" tabindex="-1">前端微应用是一种将前端应用拆分成独立的小型应用，每个应用都可以独立部署、运行和维护的架构模式。以下是前端微应用的优缺点： <a class="header-anchor" href="#前端微应用是一种将前端应用拆分成独立的小型应用-每个应用都可以独立部署、运行和维护的架构模式。以下是前端微应用的优缺点" aria-label="Permalink to &quot;前端微应用是一种将前端应用拆分成独立的小型应用，每个应用都可以独立部署、运行和维护的架构模式。以下是前端微应用的优缺点：&quot;">​</a></h3><p>优点：</p><p>灵活性： 前端微应用可以独立开发、部署和运行，各个微应用之间相互独立，可以根据需要单独更新或扩展某个微应用，提高整体系统的灵活性。</p><p>可维护性： 拆分成多个微应用后，每个微应用的代码量和复杂度都会减少，便于团队成员理解和维护，同时也降低了修改一个微应用对其他微应用的影响。</p><p>性能优化： 每个微应用可以独立加载和运行，可以根据需求进行性能优化，提升用户体验。</p><p>技术栈独立： 每个微应用可以选择适合自己业务场景的技术栈，不同微应用之间可以使用不同的框架或语言，灵活性更高。</p><p>缺点：</p><p>跨应用通信： 不同微应用之间的通信可能会变得复杂，需要设计合适的通信机制来实现数据共享和交互。</p><p>项目搭建成本： 拆分成多个微应用会增加项目的搭建成本，需要设计合适的架构和规范，以及建立统一的脚手架工具来支持微应用的开发和部署。</p><p>路由管理： 多个微应用之间的路由管理可能会变得复杂，需要考虑如何统一管理路由和页面跳转，以保证用户体验。</p><p>总体来说，前端微应用架构适合大型复杂的前端应用，能够提高系统的灵活性和可维护性，但也需要在设计和实施上花费一定的精力和成本。</p><h3 id="初中级开发" tabindex="-1">初中级开发 <a class="header-anchor" href="#初中级开发" aria-label="Permalink to &quot;初中级开发&quot;">​</a></h3><h4 id="_1-1-html-css" tabindex="-1">1.1 HTML&amp;CSS <a class="header-anchor" href="#_1-1-html-css" aria-label="Permalink to &quot;1.1 HTML&amp;CSS&quot;">​</a></h4><ol><li>请说出你所知道的移动端适配方案及对比</li></ol><h5 id="媒体查询-流式布局-响应式布局-rem-百分比-vw、vh" tabindex="-1">媒体查询 ，流式布局，响应式布局，rem，百分比，(vw、vh) <a class="header-anchor" href="#媒体查询-流式布局-响应式布局-rem-百分比-vw、vh" aria-label="Permalink to &quot;媒体查询 ，流式布局，响应式布局，rem，百分比，(vw、vh)&quot;">​</a></h5><ol start="2"><li>说说你理解的语义化，你平时会怎么做来保证语义化？</li><li>CSS盒模型</li><li>CSS常见的布局方式有哪几种</li><li>CSS如何实现一个半圆/三角形</li><li>CSS如何实现动画</li><li>CSS垂直水平居中实现方式</li></ol><h4 id="_1-2-js" tabindex="-1">1.2 JS <a class="header-anchor" href="#_1-2-js" aria-label="Permalink to &quot;1.2 JS&quot;">​</a></h4><ol><li>JS数据类型有哪些</li><li>如何解决ES6的兼容问题</li><li>请列举10个左右数组的原生方法</li></ol><h5 id="foreach-includes-map-reduce-join-concat-every-some-push-splice-slice" tabindex="-1">forEach includes map reduce join concat every some push splice slice <a class="header-anchor" href="#foreach-includes-map-reduce-join-concat-every-some-push-splice-slice" aria-label="Permalink to &quot;forEach includes map reduce join concat every some push splice slice&quot;">​</a></h5><ol start="4"><li>var，let，const有什么区别</li><li>异步实现有六种方式，你知道哪几种</li><li>箭头函数与普通函数的区别</li><li>你知道的数组去重方式有几种</li></ol><h4 id="_1-3-vue" tabindex="-1">1.3 Vue <a class="header-anchor" href="#_1-3-vue" aria-label="Permalink to &quot;1.3 Vue&quot;">​</a></h4><ol><li>Vue封装组件时，如何实现v-model。</li><li>父子组件传值有哪几种方式</li><li>说一下Vue的生命周期，一般在哪一步发请求</li><li>Vue中computed和watch有什么区别</li><li>v-if 和 v-show 的区别</li><li>vue内置指令有哪些</li><li>v-for 为什么要加 key</li></ol><h4 id="_1-4-其他" tabindex="-1">1.4 其他 <a class="header-anchor" href="#_1-4-其他" aria-label="Permalink to &quot;1.4 其他&quot;">​</a></h4><ol><li>列举平时常用的开发与调试工具</li><li>谈谈你平时如何做性能优化</li><li>聊聊你开发最成功的一个项目</li><li>使用过哪些第三方工具和插件</li></ol><h3 id="_2-中高级开发" tabindex="-1">2.中高级开发 <a class="header-anchor" href="#_2-中高级开发" aria-label="Permalink to &quot;2.中高级开发&quot;">​</a></h3><h4 id="_2-1-html-css" tabindex="-1">2.1 HTML&amp;CSS <a class="header-anchor" href="#_2-1-html-css" aria-label="Permalink to &quot;2.1 HTML&amp;CSS&quot;">​</a></h4><ol><li>说一说你知道的CSS函数</li><li>CSS伪类与伪元素区别</li><li>说一下减少DOM 数量的办法？一次性给你大量的DOM 怎么优化？</li></ol><h4 id="_2-2-js" tabindex="-1">2.2 JS <a class="header-anchor" href="#_2-2-js" aria-label="Permalink to &quot;2.2 JS&quot;">​</a></h4><ol><li>谈谈你对JS函数式编程的理解</li><li>举出闭包实际场景运用的例子</li><li>apply call bind 的作用与区别</li><li>手写函数：JS防抖节流、深拷贝</li><li>JS原型和原型链</li><li>JS事件循环机制（event loop）</li></ol><h4 id="_2-3-vue" tabindex="-1">2.3 Vue <a class="header-anchor" href="#_2-3-vue" aria-label="Permalink to &quot;2.3 Vue&quot;">​</a></h4><ol><li>Vue2，Vue3 数据响应式原理</li><li>nextTick 使用场景和原理</li><li>Vue 修饰符有哪些</li><li>Vue Diff算法原理</li><li>Vue3对比Vue2有哪些新特性</li><li>Vue要如何开发插件才能使用Vue.use方式调用</li><li>说下你的Vue 项目目录结构，如果是大型项目你该怎么划分结构和划分组件呢</li></ol><h4 id="_2-4-前端工程化" tabindex="-1">2.4 前端工程化 <a class="header-anchor" href="#_2-4-前端工程化" aria-label="Permalink to &quot;2.4 前端工程化&quot;">​</a></h4><ol><li>打包工具：webpack，vite等打包工具。</li><li>代码检查：eslint，airbnb等代码风格校验</li><li>包管理工具：npm，yarn</li><li>项目管理工具：git，svn</li></ol><h4 id="_2-5-其他" tabindex="-1">2.5 其他 <a class="header-anchor" href="#_2-5-其他" aria-label="Permalink to &quot;2.5 其他&quot;">​</a></h4><ol><li>谈谈前端性能定位以及优化指标</li><li>说一下项目性能优化过程中，是怎么充分利用 Chrome 调试工具的？</li><li>从输入一个 URL 地址到浏览器完成渲染的整个过程</li><li>babel 是什么，原理了解吗</li></ol><h5 id="用来将比较新的js代码转换为兼容的js代码-确保代码的可执行性" tabindex="-1">用来将比较新的js代码转换为兼容的js代码，确保代码的可执行性 <a class="header-anchor" href="#用来将比较新的js代码转换为兼容的js代码-确保代码的可执行性" aria-label="Permalink to &quot;用来将比较新的js代码转换为兼容的js代码，确保代码的可执行性&quot;">​</a></h5><ol start="5"><li>Tree shaking 是什么，原理是什么</li></ol><h5 id="摇除不需要的代码-通过import-export-筛选出没有被引用到的代码" tabindex="-1">摇除不需要的代码，通过import export 筛选出没有被引用到的代码 <a class="header-anchor" href="#摇除不需要的代码-通过import-export-筛选出没有被引用到的代码" aria-label="Permalink to &quot;摇除不需要的代码，通过import export 筛选出没有被引用到的代码&quot;">​</a></h5><ol start="6"><li>简述一些提升项目体验的案例和技术方案</li><li>微前端的解决方案，以及各自的优劣</li><li>长列表渲染底层原理？业内有哪些解决方案？</li><li>页面（动画）卡顿原因分析</li></ol><h5 id="ssh、http、https-的默认端口都是什么" tabindex="-1">ssh、http、https 的默认端口都是什么 <a class="header-anchor" href="#ssh、http、https-的默认端口都是什么" aria-label="Permalink to &quot;ssh、http、https 的默认端口都是什么&quot;">​</a></h5><p>ssh[安全外壳协议]: 22 http[超文本传输协议]: 80 https[安全超文本传输协议]: 443</p>`,53)]))}const c=s(t,[["render",n]]);export{o as __pageData,c as default};
